# ------------------------------------------------------------------------------------- MODELS

type Announcement
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "creatorId", operations: [create, read, update, delete] }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  body: String!
  images: [String]
  bookmarks: [Bookmark] @hasMany(indexName: "byAnnouncementId", fields: ["id"])
  likes: [Like] @hasMany(indexName: "byAnnouncementId", fields: ["id"])
  comments: [Comment] @hasMany(indexName: "byAnnouncementId", fields: ["id"])
  creatorId: ID! @index(name: "byCreatorId")
  creator: User! @belongsTo(fields: ["creatorId"])
  mosqueId: ID! @index(name: "byMosqueId")
  mosque: Mosque! @belongsTo(fields: ["mosqueId"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Bookmark
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "creatorId" }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  announcementId: ID! @index(name: "byAnnouncementId")
  announcement: Announcement! @belongsTo(fields: ["announcementId"])
  creatorId: ID! @index(name: "byCreatorId")
  creator: User! @belongsTo(fields: ["creatorId"])
  mosqueId: ID! @index(name: "byMosqueId")
  mosque: Mosque! @belongsTo(fields: ["mosqueId"])
}

type Class
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "creatorId" }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  description: String
  startDateTime: AWSDateTime!
  endDateTime: AWSDateTime
  recurring: Boolean!
  daysOfWeek: [DayType!]
  creatorId: ID! @index(name: "byCreatorId")
  creator: User! @belongsTo(fields: ["creatorId"])
  instructorId: ID! @index(name: "byInstructorId")
  instructor: User! @belongsTo(fields: ["instructorId"])
  mosqueId: ID! @index(name: "byMosqueId")
  mosque: Mosque! @belongsTo(fields: ["mosqueId"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Comment
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "creatorId" }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  text: String!
  parentCommentId: ID @index(name: "byParentCommentId")
  parentComment: Comment @belongsTo(fields: ["parentCommentId"])
  subComments: [Comment] @hasMany(indexName: "byParentCommentId", fields: ["id"])
  announcementId: ID! @index(name: "byAnnouncementId")
  announcement: Announcement! @belongsTo(fields: ["announcementId"])
  creatorId: ID! @index(name: "byCreatorId")
  creator: User! @belongsTo(fields: ["creatorId"])
  mosqueId: ID! @index(name: "byMosqueId")
  mosque: Mosque! @belongsTo(fields: ["mosqueId"])
}

type Committee
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "creatorId" }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  description: String
  creatorId: ID! @index(name: "byCreatorId")
  creator: User! @belongsTo(fields: ["creatorId"])
  mosqueId: ID! @index(name: "byMosqueId")
  mosque: Mosque! @belongsTo(fields: ["mosqueId"])
  members: [User] @manyToMany(relationName: "CommitteeMembers")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Gathering
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "creatorId" }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  description: String
  type: GatheringType!
  startDate: AWSDateTime!
  endDate: AWSDateTime
  address: Address!
  creatorId: ID! @index(name: "byCreatorId")
  creator: User! @belongsTo(fields: ["creatorId"])
  mosqueId: ID! @index(name: "byMosqueId")
  mosque: Mosque! @belongsTo(fields: ["mosqueId"])
  attendees: [User] @manyToMany(relationName: "GatheringAttendees")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Donation
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "donorId" }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  amount: Float!
  currency: String!
  isAnonymous: Boolean!
  donorId: ID! @index(name: "byDonor")
  donor: User! @belongsTo(fields: ["donorId"])
  fundraisingCampaignId: ID! @index(name: "byFundraisingCampaignId")
  fundraisingCampaign: FundraisingCampaign @belongsTo(fields: ["fundraisingCampaignId"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type FundraisingCampaign
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "creatorId" }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  description: String
  featureImage: String
  type: FundraisingCampaignType!
  currentAmount: Float!
  goal: Float!
  goalDate: AWSDateTime!
  currency: String!
  creatorId: ID! @index(name: "byCreatorId")
  creator: User! @belongsTo(fields: ["creatorId"])
  mosqueId: ID! @index(name: "byMosqueId")
  mosque: Mosque! @belongsTo(fields: ["mosqueId"])
  donations: [Donation] @hasMany(indexName: "byFundraisingCampaignId", fields: ["id"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Like
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "creatorId" }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  announcementId: ID! @index(name: "byAnnouncementId")
  announcement: Announcement! @belongsTo(fields: ["announcementId"])
  creatorId: ID! @index(name: "byCreatorId")
  creator: User! @belongsTo(fields: ["creatorId"])
  mosqueId: ID! @index(name: "byMosqueId")
  mosque: Mosque! @belongsTo(fields: ["mosqueId"])
}

type MonthlyPrayerSchedule
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "creatorId" }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  year: Int!
  month: Int!
  prayerTimes: [PrayerTime!]!
  creatorId: ID! @index(name: "byCreatorId")
  creator: User! @belongsTo(fields: ["creatorId"])
  mosqueId: ID! @index(name: "byMosqueId")
  mosque: Mosque! @belongsTo(fields: ["mosqueId"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Mosque
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "creatorId" }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  description: String!
  images: [String]!
  address: Address!
  hours: Hours
  contactInfo: ContactInfo!
  liveVideoUrl: String
  creatorId: ID! @index(name: "byCreatorId")
  creator: User! @belongsTo(fields: ["creatorId"])
  followers: [User] @manyToMany(relationName: "MosqueFollowers")
  announcements: [Announcement] @hasMany(indexName: "byMosqueId", fields: ["id"])
  classes: [Class] @hasMany(indexName: "byMosqueId", fields: ["id"])
  committees: [Committee] @hasMany(indexName: "byMosqueId", fields: ["id"])
  gatherings: [Gathering] @hasMany(indexName: "byMosqueId", fields: ["id"])
  fundraisingCampaigns: [FundraisingCampaign] @hasMany(indexName: "byMosqueId", fields: ["id"])
  monthlyPrayerSchedules: [MonthlyPrayerSchedule] @hasMany(indexName: "byMosqueId", fields: ["id"])
  resources: [Resource] @hasMany(indexName: "byMosqueId", fields: ["id"])
  services: [Service] @hasMany(indexName: "byMosqueId", fields: ["id"])
  subscriptions: [MosqueSubscription] @hasMany(indexName: "byMosqueId", fields: ["id"])
  volunteerTasks: [VolunteerTask] @hasMany(indexName: "byMosqueId", fields: ["id"])
  bookmarks: [Bookmark] @hasMany(indexName: "byMosqueId", fields: ["id"])
  likes: [Like] @hasMany(indexName: "byMosqueId", fields: ["id"])
  comments: [Comment] @hasMany(indexName: "byMosqueId", fields: ["id"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type MosqueSubscription
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "purchaserId" }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  status: MosqueSubscriptionStatus!
  startDate: AWSDateTime!
  endDate: AWSDateTime
  stripeSubscriptionId: String!
  purchaserId: ID! @index(name: "byPurchaserId")
  purchaser: User! @belongsTo(fields: ["purchaserId"])
  mosqueId: ID! @index(name: "byMosqueId")
  mosque: Mosque! @belongsTo(fields: ["mosqueId"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Resource
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "creatorId" }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  description: String
  type: ResourceType!
  url: String!
  creatorId: ID! @index(name: "byCreatorId")
  creator: User! @belongsTo(fields: ["creatorId"])
  mosqueId: ID! @index(name: "byMosqueId")
  mosque: Mosque! @belongsTo(fields: ["mosqueId"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Service
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "creatorId" }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  type: ServiceType!
  description: String
  documents: [String]
  creatorId: ID! @index(name: "byCreatorId")
  creator: User! @belongsTo(fields: ["creatorId"])
  mosqueId: ID! @index(name: "byMosqueId")
  mosque: Mosque! @belongsTo(fields: ["mosqueId"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type User
	@model(
		mutations: { create: null, update: "updateUser", delete: null }
	)
  @auth(
    rules: [
      { allow: owner }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  selfie: String
  firstName: String!
  lastName: String!
  email: AWSEmail!
  phone: AWSPhone
  type: UserType!
  status: UserStatus!
  stripeCustomerId: String
  createdAnnouncements: [Announcement] @hasMany(indexName: "byCreatorId", fields: ["id"])
  createdClasses: [Class] @hasMany(indexName: "byCreatorId", fields: ["id"])
  createdCommittees: [Committee] @hasMany(indexName: "byCreatorId", fields: ["id"])
  createdGatherings: [Gathering] @hasMany(indexName: "byCreatorId", fields: ["id"])
  createdFundraisingCampaigns: [FundraisingCampaign] @hasMany(indexName: "byCreatorId", fields: ["id"])
  createdMonthlyPrayerSchedules: [MonthlyPrayerSchedule] @hasMany(indexName: "byCreatorId", fields: ["id"])
  createdMosques: [Mosque] @hasMany(indexName: "byCreatorId", fields: ["id"])
  createdResources: [Resource] @hasMany(indexName: "byCreatorId", fields: ["id"])
  createdServices: [Service] @hasMany(indexName: "byCreatorId", fields: ["id"])
  createdVolunteerTasks: [VolunteerTask] @hasMany(indexName: "byCreatorId", fields: ["id"])
  donations: [Donation] @hasMany(indexName: "byDonor", fields: ["id"])
  committees: [Committee] @manyToMany(relationName: "CommitteeMembers")
  gatherings: [Gathering] @manyToMany(relationName: "GatheringAttendees")
  instructingClasses: [Class] @hasMany(indexName: "byInstructorId", fields: ["id"])
  mosques: [Mosque] @manyToMany(relationName: "MosqueFollowers")
  purchasedSubscriptions: [MosqueSubscription] @hasMany(indexName: "byPurchaserId", fields: ["id"])
  volunteerTasks: [VolunteerTask] @manyToMany(relationName: "VolunteerTaskUser")
  bookmarks: [Bookmark] @hasMany(indexName: "byCreatorId", fields: ["id"])
  likes: [Like] @hasMany(indexName: "byCreatorId", fields: ["id"])
  comments: [Comment] @hasMany(indexName: "byCreatorId", fields: ["id"])
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type VolunteerTask
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "creatorId" }
      { allow: private, operations: [read] }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  description: String
  startDate: AWSDateTime!
  endDate: AWSDateTime
  creatorId: ID! @index(name: "byCreatorId")
  creator: User! @belongsTo(fields: ["creatorId"])
  mosqueId: ID! @index(name: "byMosqueId")
  mosque: Mosque! @belongsTo(fields: ["mosqueId"])
  volunteers: [User] @manyToMany(relationName: "VolunteerTaskUser")
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

# ------------------------------------------------------------------------------------- CUSTOM TYPES

type Address {
  addressLine1: String!
  addressLine2: String
  addressLine3: String
  city: String!
  province: String!
  postalCode: String!
  country: String!
  latitude: Float!
  longitude: Float!
}

type ContactInfo {
  phone: AWSPhone
  email: AWSEmail
  website: String
  socialMedia: SocialMedia
}

type Day {
  type: DayType!
  operatingHours: [OperatingHours!]
}

type Hours {
  monday: Day
  tuesday: Day
  wednesday: Day
  thursday: Day
  friday: Day
  saturday: Day
  sunday: Day
}

type OperatingHours {
  open: AWSTime!
  close: AWSTime!
}

type PrayerTime {
  type: PrayerType!
  athan: AWSDateTime!
  iqamah: AWSDateTime!
}

type SocialMedia {
  facebook: String
  instagram: String
  twitter: String
  youtube: String
}

# ------------------------------------------------------------------------------------- ENUMS

enum DayType {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum GatheringType {
  LECTURE
  GATHERING
  COMMUNITY_ACTIVITY
  OTHER
}

enum FundraisingCampaignType {
  BILL
  COMMUNITY
  EDUCATION
  EMERGENCY_RELIEF
  ENVIRONMENT
  FUNERAL
  HEALTH
  MOSQUE
  ORPHANS
  OTHER
  REFUGEES
}

enum MosqueSubscriptionStatus {
  LIFETIME
  TRIAL
  ACTIVE
  INACTIVE
}

enum PrayerType {
  FAJR
  THUHR
  ASR
  MAGHRIB
  ISHA
  JUMUAH
  EID_AL_FITR
  EID_AL_ADHA
}

enum ResourceType {
  ARTICLE
  VIDEO
  BOOK
  OTHER
}

enum ServiceType {
  MARRIAGE
  FUNERAL
  COUNSELING
  OTHER
}

enum UploadType {
  SELFIE
  MOSQUE
  RESOURCE
  GATHERING_PICTURE
  FUNDRAISING_CAMPAIGN_PICTURE
  MONTHLY_PRAYER_SCHEDULE_PICTURE
  VOLUNTEER_TASK_PICTURE
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DEACTIVATED
}

enum UserType {
  ADMIN
  SUPER_ADMIN
  USER
  USER_READ_ONLY
}
